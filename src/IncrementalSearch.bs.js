// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Helpers$ReactTemplate = require("./Helpers.bs.js");

function IncrementalSearch(D) {
  var component = ReasonReact.reducerComponent("IncrementalSearch");
  var onInputText = function (e, param) {
    var text = e.target.value;
    return Curry._1(param[/* send */3], /* InputText */Block.variant("InputText", 0, [text]));
  };
  var make = function (defaultText, searchDelay, searchResultView, _) {
    return /* record */Block.record([
              "debugName",
              "reactClassInternal",
              "handedOffState",
              "willReceiveProps",
              "didMount",
              "didUpdate",
              "willUnmount",
              "willUpdate",
              "shouldUpdate",
              "render",
              "initialState",
              "retainedProps",
              "reducer",
              "subscriptions",
              "jsElementWrapped"
            ], [
              component[/* debugName */0],
              component[/* reactClassInternal */1],
              component[/* handedOffState */2],
              component[/* willReceiveProps */3],
              (function (self) {
                  return Curry._1(self[/* send */3], /* InputText */Block.variant("InputText", 0, [self[/* state */1][/* text */0]]));
                }),
              component[/* didUpdate */5],
              component[/* willUnmount */6],
              component[/* willUpdate */7],
              component[/* shouldUpdate */8],
              (function (self) {
                  var text = self[/* state */1][/* text */0];
                  return React.createElement("div", undefined, React.createElement("input", {
                                  value: text,
                                  onInput: Curry._1(self[/* handle */0], onInputText)
                                }), Curry._1(searchResultView, self[/* state */1][/* entities */1]));
                }),
              (function () {
                  return /* record */Block.record([
                            "text",
                            "entities",
                            "queueGetEntitesCommand"
                          ], [
                            Helpers$ReactTemplate.Option[/* withDefault */0]("", defaultText),
                            0,
                            0
                          ]);
                }),
              component[/* retainedProps */11],
              (function (action, state) {
                  if (typeof action === "number") {
                    var match = state[/* queueGetEntitesCommand */2];
                    if (match) {
                      var tail = match[1];
                      var command = match[0];
                      if (tail) {
                        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                      "text",
                                      "entities",
                                      "queueGetEntitesCommand"
                                    ], [
                                      state[/* text */0],
                                      state[/* entities */1],
                                      tail
                                    ])]);
                      } else {
                        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                  /* record */Block.record([
                                      "text",
                                      "entities",
                                      "queueGetEntitesCommand"
                                    ], [
                                      state[/* text */0],
                                      state[/* entities */1],
                                      0
                                    ]),
                                  (function (self) {
                                      Curry._1(D[/* findEntities */0], command).then((function (entities) {
                                              return Promise.resolve(Curry._1(self[/* send */3], /* CompletedFindEntities */Block.variant("CompletedFindEntities", 1, [entities])));
                                            }));
                                      return /* () */0;
                                    })
                                ]);
                      }
                    } else {
                      return /* NoUpdate */0;
                    }
                  } else if (action.tag) {
                    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                  "text",
                                  "entities",
                                  "queueGetEntitesCommand"
                                ], [
                                  state[/* text */0],
                                  action[0],
                                  state[/* queueGetEntitesCommand */2]
                                ])]);
                  } else {
                    var text = action[0];
                    var delay = Helpers$ReactTemplate.Option[/* withDefault */0](0.0, searchDelay);
                    return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                              /* record */Block.record([
                                  "text",
                                  "entities",
                                  "queueGetEntitesCommand"
                                ], [
                                  text,
                                  state[/* entities */1],
                                  List.concat(/* :: */Block.simpleVariant("::", [
                                          state[/* queueGetEntitesCommand */2],
                                          /* :: */Block.simpleVariant("::", [
                                              /* :: */Block.simpleVariant("::", [
                                                  text,
                                                  /* [] */0
                                                ]),
                                              /* [] */0
                                            ])
                                        ]))
                                ]),
                              (function (self) {
                                  setTimeout((function () {
                                          return Curry._1(self[/* send */3], /* Dequeue */0);
                                        }), Math.floor(delay) | 0);
                                  return /* () */0;
                                })
                            ]);
                  }
                }),
              component[/* subscriptions */13],
              component[/* jsElementWrapped */14]
            ]);
  };
  return /* module */Block.localModule([
            "component",
            "onInputText",
            "make"
          ], [
            component,
            onInputText,
            make
          ]);
}

exports.IncrementalSearch = IncrementalSearch;
/* react Not a pure module */
