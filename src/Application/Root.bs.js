// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Routing$ReactTemplate = require("../Routing.bs.js");
var ReactHelper$ReactTemplate = require("../ReactHelper.bs.js");
var GlobalStateManagement$ReactTemplate = require("../Samples/GlobalStateManagement.bs.js");

function timePromise(count) {
  return new Promise((function (resolve, _) {
                setTimeout((function () {
                        return resolve(count);
                      }), count);
                return /* () */0;
              }));
}

var Utils = /* module */Block.localModule(["timePromise"], [timePromise]);

function $eq$eq$great(a, b) {
  return /* tuple */[
          a,
          b
        ];
}

function urlToRoute(url) {
  var route = url[/* path */0];
  if (route) {
    switch (route[0]) {
      case "about" : 
          if (route[1]) {
            console.log(route);
            return /* NotFound */2;
          } else {
            return /* About */1;
          }
      case "src" : 
          var match = route[1];
          if (match) {
            if (match[0] === "index.html") {
              if (match[1]) {
                console.log(route);
                return /* NotFound */2;
              } else {
                return /* Home */0;
              }
            } else {
              console.log(route);
              return /* NotFound */2;
            }
          } else {
            console.log(route);
            return /* NotFound */2;
          }
      default:
        console.log(route);
        return /* NotFound */2;
    }
  } else {
    console.log(route);
    return /* NotFound */2;
  }
}

function transition(route) {
  switch (route) {
    case 0 : 
        return timePromise(3000).then((function (v) {
                      return Promise.resolve(React.createElement("div", undefined, String(v)));
                    }));
    case 1 : 
        return Promise.resolve(React.createElement("div", undefined, "About"));
    case 2 : 
        return Promise.resolve(React.createElement("div", undefined, "NF"));
    
  }
}

var MainContentRouting = /* module */Block.localModule([
    "urlToRoute",
    "transition"
  ], [
    urlToRoute,
    transition
  ]);

var initialState = /* record */Block.record([
    "error",
    "notification"
  ], [
    undefined,
    undefined
  ]);

function reducer(action, state) {
  return /* tuple */[
          /* record */Block.record([
              "error",
              "notification"
            ], [
              action[0],
              state[/* notification */1]
            ]),
          /* [] */0
        ];
}

var globalStore = GlobalStateManagement$ReactTemplate.Manager[/* make */5](reducer, initialState);

var App = /* module */Block.localModule([
    "initialState",
    "reducer",
    "globalStore"
  ], [
    initialState,
    reducer,
    globalStore
  ]);

function showErrorModal(error) {
  return React.createElement("div", undefined, $$Array.of_list(List.map((function (prim) {
                        return prim;
                      }), error[/* messages */0])));
}

function header() {
  return React.createElement("div", undefined, "IAM HEADER");
}

var MainContent = Routing$ReactTemplate.Application(MainContentRouting);

var blankPage = React.createElement("div", {
      className: "loading"
    });

var component = ReasonReact.statelessComponent("AppRoot");

function make() {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "subscriptions",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                return ReasonReact.element(undefined, undefined, ReactHelper$ReactTemplate.Fragment[/* make */0](/* array */[
                                header(/* () */0),
                                ReasonReact.element(undefined, undefined, Curry._5(MainContent[/* make */2], /* array */[], blankPage, (function () {
                                            return GlobalStateManagement$ReactTemplate.Manager[/* dispatch */6](globalStore, /* DetectedError */Block.simpleVariant("DetectedError", [/* record */Block.record(["messages"], [Block.simpleVariant("::", [
                                                                  "Some",
                                                                  /* [] */0
                                                                ])])]));
                                          }), (function () {
                                            console.log("start_transition");
                                            return /* () */0;
                                          }), (function () {
                                            console.log("finish_transition");
                                            return /* () */0;
                                          })))
                              ]));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* subscriptions */13],
            component[/* jsElementWrapped */14]
          ]);
}

var AppRoot = /* module */Block.localModule([
    "initialState",
    "reducer",
    "globalStore",
    "blankPage",
    "component",
    "make"
  ], [
    initialState,
    reducer,
    globalStore,
    blankPage,
    component,
    make
  ]);

function render() {
  return ReactDOMRe.renderToElementWithId(ReasonReact.element(undefined, undefined, make(/* array */[])), "index");
}

exports.Utils = Utils;
exports.$eq$eq$great = $eq$eq$great;
exports.MainContentRouting = MainContentRouting;
exports.App = App;
exports.showErrorModal = showErrorModal;
exports.header = header;
exports.MainContent = MainContent;
exports.AppRoot = AppRoot;
exports.render = render;
/* globalStore Not a pure module */
