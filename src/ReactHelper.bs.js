// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function option(op) {
  if (op !== undefined) {
    return Js_primitive.valFromOption(op);
  } else {
    return null;
  }
}

function andThen(a, b, v) {
  return Curry._1(b, Curry._1(a, v));
}

function optionalHandler(op) {
  if (op !== undefined) {
    return Curry._1(op, /* () */0);
  } else {
    return /* () */0;
  }
}

function make(children) {
  return ReasonReact.wrapJsForReason(React.Fragment, { }, children);
}

var Fragment = /* module */Block.localModule(["make"], [make]);

function queryParamStrToTuple(str) {
  var match = str.split("=");
  if (match.length !== 2) {
    return undefined;
  } else {
    var key = match[0];
    var value = match[1];
    return /* tuple */[
            key,
            value
          ];
  }
}

function optionToArray(op) {
  if (op !== undefined) {
    return /* array */[Js_primitive.valFromOption(op)];
  } else {
    return /* array */[];
  }
}

var mapFromArray = Belt_MapString.fromArray;

function routeToqueryParamMap(route) {
  return Belt_MapString.fromArray(Belt_Array.concatMany($$Array.map((function (param) {
                        return optionToArray(queryParamStrToTuple(param));
                      }), route[/* search */2].split("&"))));
}

var Router = /* module */Block.localModule([
    "queryParamStrToTuple",
    "optionToArray",
    "mapFromArray",
    "routeToqueryParamMap"
  ], [
    queryParamStrToTuple,
    optionToArray,
    mapFromArray,
    routeToqueryParamMap
  ]);

var $great$great = andThen;

exports.option = option;
exports.andThen = andThen;
exports.$great$great = $great$great;
exports.optionalHandler = optionalHandler;
exports.Fragment = Fragment;
exports.Router = Router;
/* react Not a pure module */
