// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var FlexibleTableHeader$ReactTemplate = require("./FlexibleTableHeader.bs.js");

function make(children) {
  return ReasonReact.wrapJsForReason(React.Fragment, { }, children);
}

var Fragment = /* module */[/* make */make];

function FlexibleTable(Def) {
  var defaultHeaders = function (headerColumns) {
    return List.map(Def[/* defaultHeader */3], headerColumns);
  };
  var headerItemToCell = function (header) {
    Pervasives.string_of_float(FlexibleTableHeader$ReactTemplate.getWidthSize(header[/* size */1]));
    return /* record */[
            /* column */header[/* column */0],
            /* style */{
              width: "\"${width}px\""
            }
          ];
  };
  var apperTable = function (theRef, param) {
    if (theRef == null) {
      return /* () */0;
    } else {
      return Curry._1(param[/* send */3], /* DetectedTableSize */[theRef.width]);
    }
  };
  var component = ReasonReact.reducerComponent("FlexibleTable");
  var make = function (datas, headerItems, row, header, footer, tableName, _) {
    return /* record */[
            /* debugName */component[/* debugName */0],
            /* reactClassInternal */component[/* reactClassInternal */1],
            /* handedOffState */component[/* handedOffState */2],
            /* willReceiveProps */component[/* willReceiveProps */3],
            /* didMount */component[/* didMount */4],
            /* didUpdate */component[/* didUpdate */5],
            /* willUnmount */component[/* willUnmount */6],
            /* willUpdate */component[/* willUpdate */7],
            /* shouldUpdate */component[/* shouldUpdate */8],
            /* render */(function (self) {
                var cells = List.map(headerItemToCell, FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize(self[/* state */1][/* tableWidth */0], headerItems));
                var bodyRows = $$Array.of_list(List.map(Curry._1(row, cells), datas));
                var header$1 = Curry._1(header, cells);
                var footer$1 = Curry._1(footer, cells);
                return React.createElement("table", {
                            ref: Curry._1(self[/* handle */0], apperTable),
                            name: tableName
                          }, React.createElement("thead", undefined, header$1), React.createElement("tbody", undefined, bodyRows), React.createElement("tfoot", undefined, footer$1));
              }),
            /* initialState */(function () {
                return /* record */[/* tableWidth */0.0];
              }),
            /* retainedProps */component[/* retainedProps */11],
            /* reducer */(function (action, _) {
                return /* Update */Block.__(0, [/* record */[/* tableWidth */action[0]]]);
              }),
            /* subscriptions */component[/* subscriptions */13],
            /* jsElementWrapped */component[/* jsElementWrapped */14]
          ];
  };
  return /* module */[
          /* defaultHeaders */defaultHeaders,
          /* headerItemToCell */headerItemToCell,
          /* apperTable */apperTable,
          /* component */component,
          /* make */make
        ];
}

function renderRow(headers, data) {
  var row = $$Array.of_list(List.map((function (header) {
              var match = header[/* column */0];
              if (match) {
                return React.createElement("td", {
                            style: header[/* style */1]
                          }, React.createElement("div", undefined, data[/* text */0]));
              } else {
                return React.createElement("td", {
                            style: header[/* style */1]
                          }, React.createElement("div", undefined, data[/* id */1]));
              }
            }), headers));
  return React.createElement("tr", undefined, row);
}

function renderHeader(headers) {
  return ReasonReact.element(undefined, undefined, make(/* array */[$$Array.of_list(List.map((function (header) {
                              var match = header[/* column */0];
                              if (match) {
                                return React.createElement("th", undefined, "Name");
                              } else {
                                return React.createElement("th", undefined, "ID");
                              }
                            }), headers))]));
}

function renderFooter(headers) {
  return ReasonReact.element(undefined, undefined, make(/* array */[React.createElement("tr", undefined, $$Array.of_list(List.map((function () {
                                  return React.createElement("td", undefined);
                                }), headers)))]));
}

var TableSample = /* module */[
  /* renderRow */renderRow,
  /* renderHeader */renderHeader,
  /* renderFooter */renderFooter
];

function dataRowStyle(_, _$1) {
  return "";
}

function headerRowStyle() {
  return "";
}

function footerRowStyle() {
  return "";
}

function defaultHeader(header) {
  if (header) {
    return /* record */[
            /* column : Name */1,
            /* size : Large */2,
            /* isSizeFixed */false
          ];
  } else {
    return /* record */[
            /* column : ID */0,
            /* size : Small */0,
            /* isSizeFixed */false
          ];
  }
}

var TodoTableDef = /* module */[
  /* dataRowStyle */dataRowStyle,
  /* headerRowStyle */headerRowStyle,
  /* footerRowStyle */footerRowStyle,
  /* defaultHeader */defaultHeader
];

function defaultHeaders(headerColumns) {
  return List.map(defaultHeader, headerColumns);
}

function headerItemToCell(header) {
  Pervasives.string_of_float(FlexibleTableHeader$ReactTemplate.getWidthSize(header[/* size */1]));
  return /* record */[
          /* column */header[/* column */0],
          /* style */{
            width: "\"${width}px\""
          }
        ];
}

function apperTable(theRef, param) {
  if (theRef == null) {
    return /* () */0;
  } else {
    return Curry._1(param[/* send */3], /* DetectedTableSize */[theRef.width]);
  }
}

var component = ReasonReact.reducerComponent("FlexibleTable");

function make$1(datas, headerItems, row, header, footer, tableName, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var cells = List.map(headerItemToCell, FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize(self[/* state */1][/* tableWidth */0], headerItems));
              var bodyRows = $$Array.of_list(List.map(Curry._1(row, cells), datas));
              var header$1 = Curry._1(header, cells);
              var footer$1 = Curry._1(footer, cells);
              return React.createElement("table", {
                          ref: Curry._1(self[/* handle */0], apperTable),
                          name: tableName
                        }, React.createElement("thead", undefined, header$1), React.createElement("tbody", undefined, bodyRows), React.createElement("tfoot", undefined, footer$1));
            }),
          /* initialState */(function () {
              return /* record */[/* tableWidth */0.0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* tableWidth */action[0]]]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var TodoFlexibleTable = /* module */[
  /* defaultHeaders */defaultHeaders,
  /* headerItemToCell */headerItemToCell,
  /* apperTable */apperTable,
  /* component */component,
  /* make */make$1
];

ReasonReact.element(undefined, undefined, make$1(/* :: */[
          /* record */[
            /* text */"",
            /* id */"id"
          ],
          /* [] */0
        ], List.map(defaultHeader, /* :: */[
              /* ID */0,
              /* :: */[
                /* Name */1,
                /* [] */0
              ]
            ]), renderRow, renderHeader, renderFooter, "todoTable", /* array */[]));

exports.Fragment = Fragment;
exports.FlexibleTable = FlexibleTable;
exports.TableSample = TableSample;
exports.TodoTableDef = TodoTableDef;
exports.TodoFlexibleTable = TodoFlexibleTable;
/* component Not a pure module */
