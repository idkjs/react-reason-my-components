// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var FlexibleTableHeader$ReactTemplate = require("./FlexibleTableHeader.bs.js");

function make(children) {
  return ReasonReact.wrapJsForReason(React.Fragment, { }, children);
}

var Fragment = /* module */Block.localModule(["make"], [make]);

function FlexibleTable(T) {
  var defaultHeaders = function (headerColumns) {
    return List.map(T[/* defaultHeader */3], headerColumns);
  };
  var headerItemToCell = function (header) {
    var width = FlexibleTableHeader$ReactTemplate.getWidthSize(header[/* size */1]);
    return /* record */Block.record([
              "column",
              "style"
            ], [
              header[/* column */0],
              {
                width: "" + (String(width) + ("" + (String("px") + "")))
              }
            ]);
  };
  var apperTable = function (theRef, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    var tableDomToAction = function (tableDom) {
      var tableWidth = tableDom.clientWidth;
      if (tableWidth !== state[/* tableWidth */0]) {
        return Curry._1(send, /* DetectedTableSize */Block.simpleVariant("DetectedTableSize", [tableWidth]));
      } else {
        return 0;
      }
    };
    if (theRef == null) {
      return /* () */0;
    } else {
      state[/* tableDom */1] = Js_primitive.some(theRef);
      theRef.addEventListener("transitionend", (function () {
              var match = state[/* tableDom */1];
              if (match !== undefined) {
                return tableDomToAction(Js_primitive.valFromOption(match));
              } else {
                return /* () */0;
              }
            }));
      return tableDomToAction(theRef);
    }
  };
  var component = ReasonReact.reducerComponent("FlexibleTable");
  var make = function (datas, headerItems, row, header, footer, tableClassName, _) {
    return /* record */Block.record([
              "debugName",
              "reactClassInternal",
              "handedOffState",
              "willReceiveProps",
              "didMount",
              "didUpdate",
              "willUnmount",
              "willUpdate",
              "shouldUpdate",
              "render",
              "initialState",
              "retainedProps",
              "reducer",
              "subscriptions",
              "jsElementWrapped"
            ], [
              component[/* debugName */0],
              component[/* reactClassInternal */1],
              component[/* handedOffState */2],
              component[/* willReceiveProps */3],
              component[/* didMount */4],
              component[/* didUpdate */5],
              component[/* willUnmount */6],
              component[/* willUpdate */7],
              component[/* shouldUpdate */8],
              (function (self) {
                  var cells = List.map(headerItemToCell, FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize(self[/* state */1][/* tableWidth */0], headerItems));
                  var bodyRows = $$Array.of_list(List.map(Curry._1(row, cells), datas));
                  var header$1 = Curry._1(header, cells);
                  var footer$1 = Curry._1(footer, cells);
                  return React.createElement("table", {
                              ref: Curry._1(self[/* handle */0], apperTable),
                              className: tableClassName
                            }, React.createElement("thead", undefined, header$1), React.createElement("tbody", undefined, bodyRows), React.createElement("tfoot", undefined, footer$1));
                }),
              (function () {
                  return /* record */Block.record([
                            "tableWidth",
                            "tableDom"
                          ], [
                            0.0,
                            undefined
                          ]);
                }),
              component[/* retainedProps */11],
              (function (action, state) {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "tableWidth",
                                "tableDom"
                              ], [
                                action[0],
                                state[/* tableDom */1]
                              ])]);
                }),
              component[/* subscriptions */13],
              component[/* jsElementWrapped */14]
            ]);
  };
  return /* module */Block.localModule([
            "defaultHeaders",
            "headerItemToCell",
            "apperTable",
            "component",
            "make"
          ], [
            defaultHeaders,
            headerItemToCell,
            apperTable,
            component,
            make
          ]);
}

var getWidthSize = FlexibleTableHeader$ReactTemplate.getWidthSize;

var headerItemToJs = FlexibleTableHeader$ReactTemplate.headerItemToJs;

var headerItemFromJs = FlexibleTableHeader$ReactTemplate.headerItemFromJs;

var valueToString = FlexibleTableHeader$ReactTemplate.valueToString;

var stringFromValue = FlexibleTableHeader$ReactTemplate.stringFromValue;

var getWidthSizeByTableWidthSize = FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize;

exports.getWidthSize = getWidthSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
exports.Fragment = Fragment;
exports.FlexibleTable = FlexibleTable;
/* react Not a pure module */
