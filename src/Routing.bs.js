// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function Application(R) {
  var getPageElement = function (page) {
    return page[0];
  };
  var component = ReasonReact.reducerComponent("application");
  var make = function (_, initialPage, onError, onStartTransition, onFinishransition) {
    return /* record */Block.record([
              "debugName",
              "reactClassInternal",
              "handedOffState",
              "willReceiveProps",
              "didMount",
              "didUpdate",
              "willUnmount",
              "willUpdate",
              "shouldUpdate",
              "render",
              "initialState",
              "retainedProps",
              "reducer",
              "subscriptions",
              "jsElementWrapped"
            ], [
              component[/* debugName */0],
              component[/* reactClassInternal */1],
              component[/* handedOffState */2],
              component[/* willReceiveProps */3],
              (function (self) {
                  var id = ReasonReact.Router[/* watchUrl */1]((function (url) {
                          var route = Curry._1(R[/* urlToRoute */0], url);
                          Curry._1(self[/* send */3], /* StartPageLoading */Block.variant("StartPageLoading", 0, [self[/* state */1][/* page */0][0]]));
                          Curry._1(R[/* transition */1], route).then((function (element) {
                                    return Promise.resolve(/* LoadedPage */Block.variant("LoadedPage", 1, [element]));
                                  })).catch(Curry.__1(onError));
                          return /* () */0;
                        }));
                  return Curry._1(self[/* onUnmount */4], (function () {
                                return ReasonReact.Router[/* unwatchUrl */2](id);
                              }));
                }),
              component[/* didUpdate */5],
              component[/* willUnmount */6],
              component[/* willUpdate */7],
              component[/* shouldUpdate */8],
              (function (self) {
                  return self[/* state */1][/* page */0][0];
                }),
              (function () {
                  return /* record */Block.record(["page"], [Block.variant("Loaded", 1, [initialPage])]);
                }),
              component[/* retainedProps */11],
              (function (action, _) {
                  if (action.tag) {
                    return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                              /* record */Block.record(["page"], [Block.variant("Loaded", 1, [action[0]])]),
                              (function () {
                                  return Curry._1(onFinishransition, /* () */0);
                                })
                            ]);
                  } else {
                    return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                              /* record */Block.record(["page"], [Block.variant("InTransition", 0, [action[0]])]),
                              (function () {
                                  return Curry._1(onStartTransition, /* () */0);
                                })
                            ]);
                  }
                }),
              component[/* subscriptions */13],
              component[/* jsElementWrapped */14]
            ]);
  };
  return /* module */Block.localModule([
            "getPageElement",
            "component",
            "make"
          ], [
            getPageElement,
            component,
            make
          ]);
}

exports.Application = Application;
/* ReasonReact Not a pure module */
