// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function fromErrors(getErrors) {
  return /* Validator */Block.simpleVariant("Validator", [getErrors]);
}

function all(validators) {
  var allGetErrors = List.map((function (validator) {
          return validator[0];
        }), validators);
  var validateLogic = function (subject) {
    return List.flatten(List.map((function (getError) {
                      return Curry._1(getError, subject);
                    }), allGetErrors));
  };
  return /* Validator */Block.simpleVariant("Validator", [validateLogic]);
}

function first(validators) {
  var allValidation = all(validators);
  var validateLogic = function (subject) {
    try {
      return Curry._1(allValidation[0], subject);
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.failure) {
        return /* [] */0;
      } else {
        throw exn;
      }
    }
  };
  return /* Validator */Block.simpleVariant("Validator", [validateLogic]);
}

function run(validator, getSubject, source) {
  return Curry._1(validator[0], Curry._1(getSubject, source));
}

exports.fromErrors = fromErrors;
exports.all = all;
exports.first = first;
exports.run = run;
/* No side effect */
