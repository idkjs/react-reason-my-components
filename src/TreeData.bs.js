// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");

function join(strings) {
  return List.fold_left((function (a, b) {
                return a + b;
              }), "", strings);
}

var MyString = /* module */Block.localModule(["join"], [join]);

function Tree(L) {
  var leaf = function (t) {
    return /* Leaf */Block.variant("Leaf", 0, [t]);
  };
  var node = function (tree) {
    return /* Node */Block.variant("Node", 1, [tree]);
  };
  var nodeIdentity = function (tree) {
    if (tree.tag) {
      return "node-" + join(List.map(nodeIdentity, tree[0]));
    } else {
      return "leaf-" + Curry._1(L[/* identity */0], tree[0]);
    }
  };
  var updateLeaf = function (t, tree) {
    if (tree.tag) {
      return /* Node */Block.variant("Node", 1, [List.map((function (param) {
                        return updateLeaf(t, param);
                      }), tree[0])]);
    } else {
      var data = tree[0];
      if (Curry._1(L[/* identity */0], data) === Curry._1(L[/* identity */0], t)) {
        return /* Leaf */Block.variant("Leaf", 0, [t]);
      } else {
        return /* Leaf */Block.variant("Leaf", 0, [data]);
      }
    }
  };
  var showTree = function (tree) {
    if (tree.tag) {
      var nodes = tree[0];
      var reactElmList = List.map(showTree, nodes);
      return React.createElement("div", {
                  key: nodeIdentity(/* Node */Block.variant("Node", 1, [nodes]))
                }, $$Array.of_list(reactElmList));
    } else {
      var data = tree[0];
      return React.createElement("span", {
                  key: nodeIdentity(/* Leaf */Block.variant("Leaf", 0, [data]))
                }, Curry._1(L[/* showLeaf */1], data));
    }
  };
  return /* module */Block.localModule([
            "leaf",
            "node",
            "nodeIdentity",
            "updateLeaf",
            "showTree"
          ], [
            leaf,
            node,
            nodeIdentity,
            updateLeaf,
            showTree
          ]);
}

exports.MyString = MyString;
exports.Tree = Tree;
/* react Not a pure module */
