// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function unsubscribe(store, listener, _) {
  store[/* listeners */2] = List.filter((function (l) {
            return listener !== l;
          }))(store[/* listeners */2]);
  return /* () */0;
}

function subscribe(store, listener) {
  store[/* listeners */2] = /* :: */Block.simpleVariant("::", [
      listener,
      store[/* listeners */2]
    ]);
  return (function (param) {
      return unsubscribe(store, listener, param);
    });
}

function getState(store) {
  return store[/* state */0];
}

function unsubscribeError(store, listener, _) {
  store[/* errorListeners */3] = List.filter((function (l) {
            return listener !== l;
          }))(store[/* errorListeners */3]);
  return /* () */0;
}

function subscribeError(store, listener) {
  store[/* errorListeners */3] = /* :: */Block.simpleVariant("::", [
      listener,
      store[/* errorListeners */3]
    ]);
  return (function (param) {
      return unsubscribeError(store, listener, param);
    });
}

function make(reducer, initialState) {
  return /* record */Block.record([
            "state",
            "reducer",
            "listeners",
            "errorListeners"
          ], [
            initialState,
            reducer,
            0,
            0
          ]);
}

function dispatch(store, action) {
  var match = Curry._2(store[/* reducer */1], action, store[/* state */0]);
  store[/* state */0] = match[0];
  List.iter((function (listener) {
          return Curry._1(listener, /* () */0);
        }), store[/* listeners */2]);
  List.iter((function (actionPromise) {
          actionPromise.then((function (wrapAction) {
                    dispatch(store, wrapAction);
                    return Promise.resolve(/* () */0);
                  })).catch((function (error) {
                  List.iter((function (listener) {
                          return Curry._1(listener, error);
                        }), store[/* errorListeners */3]);
                  return Promise.resolve(/* () */0);
                }));
          return /* () */0;
        }), match[1]);
  return /* () */0;
}

var Manager = /* module */Block.localModule([
    "unsubscribe",
    "subscribe",
    "getState",
    "unsubscribeError",
    "subscribeError",
    "make",
    "dispatch"
  ], [
    unsubscribe,
    subscribe,
    getState,
    unsubscribeError,
    subscribeError,
    make,
    dispatch
  ]);

function reducer(action, state) {
  if (action) {
    return /* tuple */[
            /* record */Block.record([
                "value",
                "label"
              ], [
                state[/* value */0] - 1 | 0,
                state[/* label */1]
              ]),
            /* [] */0
          ];
  } else {
    var nextValue = state[/* value */0] + 1 | 0;
    return /* tuple */[
            /* record */Block.record([
                "value",
                "label"
              ], [
                nextValue,
                state[/* label */1]
              ]),
            nextValue < 100 ? /* :: */Block.simpleVariant("::", [
                  Promise.resolve(/* Increment */0),
                  /* [] */0
                ]) : /* [] */0
          ];
  }
}

var manager = make(reducer, /* record */Block.record([
        "value",
        "label"
      ], [
        0,
        "_"
      ]));

subscribe(manager, (function () {
        console.log(manager[/* state */0]);
        return /* () */0;
      }));

dispatch(manager, /* Increment */0);

exports.Manager = Manager;
exports.reducer = reducer;
/* manager Not a pure module */
