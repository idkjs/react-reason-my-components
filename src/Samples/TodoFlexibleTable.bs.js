// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var FlexibleTable$ReactTemplate = require("../FlexibleTable.bs.js");

function renderRow(headers, data) {
  var row = $$Array.of_list(List.map((function (header) {
              var match = header[/* column */0];
              switch (match) {
                case 0 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "id",
                                style: header[/* style */1]
                              }, data[/* id */1]);
                case 1 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "name",
                                style: header[/* style */1]
                              }, data[/* text */0]);
                case 2 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "age",
                                style: header[/* style */1]
                              }, String(data[/* age */2]));
                case 3 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "hb",
                                style: header[/* style */1]
                              }, data[/* hobby */3]);
                
              }
            }), headers));
  return React.createElement("tr", {
              key: data[/* id */1]
            }, row);
}

function renderHeader(headers) {
  return React.createElement("tr", undefined, $$Array.of_list(List.map((function (header) {
                        var match = header[/* column */0];
                        switch (match) {
                          case 0 : 
                              return React.createElement("th", {
                                          key: "header-id",
                                          style: header[/* style */1]
                                        }, "ID");
                          case 1 : 
                              return React.createElement("th", {
                                          key: "header-name",
                                          style: header[/* style */1]
                                        }, "Name");
                          case 2 : 
                              return React.createElement("th", {
                                          key: "header-age",
                                          style: header[/* style */1]
                                        }, "Age");
                          case 3 : 
                              return React.createElement("th", {
                                          key: "header-hobby",
                                          style: header[/* style */1]
                                        }, "Hobby");
                          
                        }
                      }), headers)));
}

function renderFooter() {
  return null;
}

function dataRowStyle(_, _$1) {
  return "";
}

function headerRowStyle() {
  return "";
}

function footerRowStyle() {
  return "";
}

function defaultHeader(header) {
  switch (header) {
    case 0 : 
        return /* record */[
                /* column : ID */0,
                /* size : Free */[200.0],
                /* isSizeFixed */false
              ];
    case 1 : 
        return /* record */[
                /* column : Name */1,
                /* size : Free */[200.0],
                /* isSizeFixed */false
              ];
    case 2 : 
        return /* record */[
                /* column : Age */2,
                /* size : Free */[200.0],
                /* isSizeFixed */false
              ];
    case 3 : 
        return /* record */[
                /* column : Hobby */3,
                /* size : Free */[200.0],
                /* isSizeFixed */false
              ];
    
  }
}

var TodoTableDef = /* module */[
  /* dataRowStyle */dataRowStyle,
  /* headerRowStyle */headerRowStyle,
  /* footerRowStyle */footerRowStyle,
  /* defaultHeader */defaultHeader
];

var TodoFlexibleTable = FlexibleTable$ReactTemplate.FlexibleTable(TodoTableDef);

var defaultState_000 = /* headerItems */Curry._1(TodoFlexibleTable[/* defaultHeaders */0], /* :: */[
      /* ID */0,
      /* :: */[
        /* Name */1,
        /* :: */[
          /* Hobby */3,
          /* :: */[
            /* Age */2,
            /* [] */0
          ]
        ]
      ]
    ]);

var defaultState = /* record */[
  defaultState_000,
  /* tableClassName */"todo-table"
];

var todo = /* record */[
  /* text */"hy!",
  /* id */"id",
  /* age */20,
  /* hobby */"hobty"
];

var component = ReasonReact.reducerComponent("TodoTableContainer");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              setTimeout((function () {
                      return Curry._1(self[/* send */3], /* ExtendTable */1);
                    }), 3000);
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return ReasonReact.element(undefined, undefined, Curry._7(TodoFlexibleTable[/* make */4], /* :: */[
                              todo,
                              /* [] */0
                            ], self[/* state */1][/* headerItems */0], renderRow, renderHeader, renderFooter, self[/* state */1][/* tableClassName */1], /* array */[]));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[
                            /* headerItems */state[/* headerItems */0],
                            /* tableClassName */"big-todo-table"
                          ]]);
              } else {
                var tmpNextHeaderItems = List.tl(state[/* headerItems */0]);
                var nextHeaderItems = List.length(tmpNextHeaderItems) < 1 ? defaultState_000 : tmpNextHeaderItems;
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* headerItems */nextHeaderItems,
                            /* tableClassName */state[/* tableClassName */1]
                          ],
                          (function (self) {
                              setTimeout((function () {
                                      return Curry._1(self[/* send */3], /* DeleteHeader */0);
                                    }), 1000);
                              return /* () */0;
                            })
                        ]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var TodoTableSample = /* module */[
  /* defaultState */defaultState,
  /* todo */todo,
  /* component */component,
  /* make */make
];

var getWidthSize = FlexibleTable$ReactTemplate.getWidthSize;

var headerItemToJs = FlexibleTable$ReactTemplate.headerItemToJs;

var headerItemFromJs = FlexibleTable$ReactTemplate.headerItemFromJs;

var valueToString = FlexibleTable$ReactTemplate.valueToString;

var stringFromValue = FlexibleTable$ReactTemplate.stringFromValue;

var getWidthSizeByTableWidthSize = FlexibleTable$ReactTemplate.getWidthSizeByTableWidthSize;

var Fragment = FlexibleTable$ReactTemplate.Fragment;

var FlexibleTable = FlexibleTable$ReactTemplate.FlexibleTable;

exports.getWidthSize = getWidthSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
exports.Fragment = Fragment;
exports.FlexibleTable = FlexibleTable;
exports.renderRow = renderRow;
exports.renderHeader = renderHeader;
exports.renderFooter = renderFooter;
exports.TodoTableDef = TodoTableDef;
exports.TodoFlexibleTable = TodoFlexibleTable;
exports.TodoTableSample = TodoTableSample;
/* TodoFlexibleTable Not a pure module */
