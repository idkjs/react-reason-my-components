// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var FlexibleTable$ReactTemplate = require("../FlexibleTable.bs.js");

function renderRow(headers, data) {
  var row = $$Array.of_list(List.map((function (header) {
              var match = header[/* column */0];
              switch (match) {
                case 0 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "id",
                                style: header[/* style */1]
                              }, data[/* id */1]);
                case 1 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "name",
                                style: header[/* style */1]
                              }, data[/* text */0]);
                case 2 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "age",
                                style: header[/* style */1]
                              }, String(data[/* age */2]));
                case 3 : 
                    return React.createElement("td", {
                                key: data[/* id */1] + "hb",
                                style: header[/* style */1]
                              }, data[/* hobby */3]);
                
              }
            }), headers));
  return React.createElement("tr", {
              key: data[/* id */1]
            }, row);
}

function renderHeader(headers) {
  return React.createElement("tr", undefined, $$Array.of_list(List.map((function (header) {
                        var match = header[/* column */0];
                        switch (match) {
                          case 0 : 
                              return React.createElement("th", {
                                          key: "header-id",
                                          style: header[/* style */1]
                                        }, "ID");
                          case 1 : 
                              return React.createElement("th", {
                                          key: "header-name",
                                          style: header[/* style */1]
                                        }, "Name");
                          case 2 : 
                              return React.createElement("th", {
                                          key: "header-age",
                                          style: header[/* style */1]
                                        }, "Age");
                          case 3 : 
                              return React.createElement("th", {
                                          key: "header-hobby",
                                          style: header[/* style */1]
                                        }, "Hobby");
                          
                        }
                      }), headers)));
}

function renderFooter() {
  return null;
}

function dataRowStyle(_, _$1) {
  return "";
}

function headerRowStyle() {
  return "";
}

function footerRowStyle() {
  return "";
}

function defaultHeader(header) {
  switch (header) {
    case 0 : 
        return /* record */Block.record([
                  "column",
                  "size",
                  "isSizeFixed"
                ], [
                  0,
                  Block.simpleVariant("Free", [200.0]),
                  false
                ]);
    case 1 : 
        return /* record */Block.record([
                  "column",
                  "size",
                  "isSizeFixed"
                ], [
                  1,
                  Block.simpleVariant("Free", [200.0]),
                  false
                ]);
    case 2 : 
        return /* record */Block.record([
                  "column",
                  "size",
                  "isSizeFixed"
                ], [
                  2,
                  Block.simpleVariant("Free", [200.0]),
                  false
                ]);
    case 3 : 
        return /* record */Block.record([
                  "column",
                  "size",
                  "isSizeFixed"
                ], [
                  3,
                  Block.simpleVariant("Free", [200.0]),
                  false
                ]);
    
  }
}

var TodoTableDef = /* module */Block.localModule([
    "dataRowStyle",
    "headerRowStyle",
    "footerRowStyle",
    "defaultHeader"
  ], [
    dataRowStyle,
    headerRowStyle,
    footerRowStyle,
    defaultHeader
  ]);

var TodoFlexibleTable = FlexibleTable$ReactTemplate.FlexibleTable(TodoTableDef);

var defaultState_000 = /* headerItems */Curry._1(TodoFlexibleTable[/* defaultHeaders */0], /* :: */Block.simpleVariant("::", [
        /* ID */0,
        /* :: */Block.simpleVariant("::", [
            /* Name */1,
            /* :: */Block.simpleVariant("::", [
                /* Hobby */3,
                /* :: */Block.simpleVariant("::", [
                    /* Age */2,
                    /* [] */0
                  ])
              ])
          ])
      ]));

var defaultState = /* record */Block.record([
    "headerItems",
    "tableClassName"
  ], [
    defaultState_000,
    "todo-table"
  ]);

var todo = /* record */Block.record([
    "text",
    "id",
    "age",
    "hobby"
  ], [
    "hy!",
    "id",
    20,
    "hobty"
  ]);

var component = ReasonReact.reducerComponent("TodoTableContainer");

function make() {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "subscriptions",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                setTimeout((function () {
                        return Curry._1(self[/* send */3], /* ExtendTable */1);
                      }), 3000);
                return /* () */0;
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                return ReasonReact.element(undefined, undefined, Curry._7(TodoFlexibleTable[/* make */4], /* :: */Block.simpleVariant("::", [
                                  todo,
                                  /* [] */0
                                ]), self[/* state */1][/* headerItems */0], renderRow, renderHeader, renderFooter, self[/* state */1][/* tableClassName */1], /* array */[]));
              }),
            (function () {
                return defaultState;
              }),
            component[/* retainedProps */11],
            (function (action, state) {
                if (action) {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "headerItems",
                                "tableClassName"
                              ], [
                                state[/* headerItems */0],
                                "big-todo-table"
                              ])]);
                } else {
                  var tmpNextHeaderItems = List.tl(state[/* headerItems */0]);
                  var nextHeaderItems = List.length(tmpNextHeaderItems) < 1 ? defaultState_000 : tmpNextHeaderItems;
                  return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                            /* record */Block.record([
                                "headerItems",
                                "tableClassName"
                              ], [
                                nextHeaderItems,
                                state[/* tableClassName */1]
                              ]),
                            (function (self) {
                                setTimeout((function () {
                                        return Curry._1(self[/* send */3], /* DeleteHeader */0);
                                      }), 1000);
                                return /* () */0;
                              })
                          ]);
                }
              }),
            component[/* subscriptions */13],
            component[/* jsElementWrapped */14]
          ]);
}

var TodoTableSample = /* module */Block.localModule([
    "defaultState",
    "todo",
    "component",
    "make"
  ], [
    defaultState,
    todo,
    component,
    make
  ]);

var getWidthSize = FlexibleTable$ReactTemplate.getWidthSize;

var headerItemToJs = FlexibleTable$ReactTemplate.headerItemToJs;

var headerItemFromJs = FlexibleTable$ReactTemplate.headerItemFromJs;

var valueToString = FlexibleTable$ReactTemplate.valueToString;

var stringFromValue = FlexibleTable$ReactTemplate.stringFromValue;

var getWidthSizeByTableWidthSize = FlexibleTable$ReactTemplate.getWidthSizeByTableWidthSize;

var FlexibleTable = FlexibleTable$ReactTemplate.FlexibleTable;

exports.getWidthSize = getWidthSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
exports.FlexibleTable = FlexibleTable;
exports.renderRow = renderRow;
exports.renderHeader = renderHeader;
exports.renderFooter = renderFooter;
exports.TodoTableDef = TodoTableDef;
exports.TodoFlexibleTable = TodoFlexibleTable;
exports.TodoTableSample = TodoTableSample;
/* TodoFlexibleTable Not a pure module */
