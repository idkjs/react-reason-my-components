// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function getWidthSize(size) {
  if (typeof size === "number") {
    switch (size) {
      case 0 : 
          return 7.0;
      case 1 : 
          return 9.5;
      case 2 : 
          return 12.0;
      
    }
  } else {
    return size[0];
  }
}

function reportHeaderItemWidthDefaultSize(item) {
  if (item >= 3) {
    switch (item - 3 | 0) {
      case 0 : 
          return /* Medium */1;
      case 1 : 
          return /* Small */0;
      case 2 : 
          return /* Free */[10.0];
      
    }
  } else {
    return /* Small */0;
  }
}

function headerItemWidthDefaultSize(item) {
  if (typeof item === "number") {
    if (item !== 1) {
      return /* Small */0;
    } else {
      return /* Large */2;
    }
  } else {
    return reportHeaderItemWidthDefaultSize(item[0]);
  }
}

function headerItemToJs(param) {
  return {
          column: param[/* column */0],
          size: param[/* size */1],
          isSizeFiexed: param[/* isSizeFiexed */2]
        };
}

function headerItemFromJs(param) {
  return /* record */[
          /* column */param.column,
          /* size */param.size,
          /* isSizeFiexed */param.isSizeFiexed
        ];
}

function getHeaderItemWidthSize(headerItem) {
  return getWidthSize(headerItem[/* size */1]);
}

function headerItemFromAny(headerItem) {
  return JSON.stringify(headerItemToJs(headerItem));
}

function anyToHeaderItem(anyString) {
  return headerItemFromJs(JSON.parse(anyString));
}

function valueToString(func, value) {
  return JSON.stringify(Curry._1(func, value));
}

function stringFromValue(func, anyString) {
  return Curry._1(func, JSON.parse(anyString));
}

function getWidthSizeByTableWidthSize(tableWidthSize, header) {
  var headerSizeList = List.map(getHeaderItemWidthSize, header);
  var totalHeaderSize = List.fold_left((function (prim, prim$1) {
          return prim + prim$1;
        }), 0.0, headerSizeList);
  if (tableWidthSize > totalHeaderSize) {
    var flexibleSizeHeaderCount = List.length(List.filter((function (header) {
                  return !header[/* isSizeFiexed */2];
                }))(header));
    var totalSizeFiexedWidth = List.fold_left((function (prim, prim$1) {
            return prim + prim$1;
          }), 0.0, List.map(getHeaderItemWidthSize, List.filter((function (header) {
                      return header[/* isSizeFiexed */2];
                    }))(header)));
    var headerSize = (tableWidthSize - totalSizeFiexedWidth) / flexibleSizeHeaderCount;
    return List.map((function (headerItem) {
                  return /* record */[
                          /* column */headerItem[/* column */0],
                          /* size : Free */[headerSize],
                          /* isSizeFiexed */headerItem[/* isSizeFiexed */2]
                        ];
                }), header);
  } else {
    return header;
  }
}

var anyString = JSON.stringify({
      column: /* column : Name */1,
      size: /* size : Free */[100.0],
      isSizeFiexed: /* isSizeFiexed */false
    });

console.log(getWidthSizeByTableWidthSize(1000.0, /* :: */[
          headerItemFromJs(JSON.parse(anyString)),
          /* [] */0
        ]));

var anyString$1 = JSON.stringify({
      column: /* column : Name */1,
      size: /* size : Free */[100.0],
      isSizeFiexed: /* isSizeFiexed */false
    });

var v = headerItemFromJs(JSON.parse(anyString$1));

console.log(getWidthSize(v[/* size */1]));

exports.getWidthSize = getWidthSize;
exports.reportHeaderItemWidthDefaultSize = reportHeaderItemWidthDefaultSize;
exports.headerItemWidthDefaultSize = headerItemWidthDefaultSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.getHeaderItemWidthSize = getHeaderItemWidthSize;
exports.headerItemFromAny = headerItemFromAny;
exports.anyToHeaderItem = anyToHeaderItem;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
/*  Not a pure module */
