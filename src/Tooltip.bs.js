// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function positionToAttrString(position) {
  switch (position) {
    case 0 : 
        return "left";
    case 1 : 
        return "right";
    case 2 : 
        return "down";
    case 3 : 
        return "up";
    
  }
}

function sizeToAttrString(size) {
  switch (size) {
    case 0 : 
        return "small";
    case 1 : 
        return "medium";
    case 2 : 
        return "large";
    case 3 : 
        return "xlarge";
    case 4 : 
        return "fit";
    
  }
}

var component = ReasonReact.reducerComponent("TooltipComponent");

function make(position, size, text, parent, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "subscriptions",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                return React.cloneElement(parent, {
                            "data-balloon-length": sizeToAttrString(size),
                            "data-balloon": text,
                            "data-balloon-pos": positionToAttrString(position),
                            onMouseOver: (function () {
                                return Curry._1(self[/* send */3], /* Open */0);
                              }),
                            onMouseLeave: (function () {
                                return Curry._1(self[/* send */3], /* Close */1);
                              })
                          });
              }),
            (function () {
                return /* record */Block.record(["isOpen"], [false]);
              }),
            component[/* retainedProps */11],
            (function (action, _) {
                if (action) {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record(["isOpen"], [false])]);
                } else {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record(["isOpen"], [true])]);
                }
              }),
            component[/* subscriptions */13],
            component[/* jsElementWrapped */14]
          ]);
}

exports.positionToAttrString = positionToAttrString;
exports.sizeToAttrString = sizeToAttrString;
exports.component = component;
exports.make = make;
/* component Not a pure module */
